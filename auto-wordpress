#!/usr/bin/env bash
# Start a wordpress (multi)site from a git repo and autoupgrade it.

# We need a path
test $# -eq 0 &&
echo "I need the path to clone wordpress into" &&
exit

# Absolute path
site="$(realpath "$1")"

# Clone or fetch?
if test -d "${site}/.git" ; then
  pushd "${site}"
  git fetch --prune --tags origin
else
  git clone https://github.com/WordPress/WordPress "${site}"
  pushd "${site}"
fi

# Restore write permissions
# Allow everything to user, read to group and nothing to everyone else
find "${site}" -type d -print0 | xargs -0 chmod 750
find "${site}" -type f -print0 | xargs -0 chmod 640

# Checkout the latest released version
git checkout --force "$(git tag | sort --version-sort | tail --lines=1)"

# Get all installed plugins
plugins=($(find wp-content/plugins -mindepth 1 -maxdepth 1 -type d -printf "%f\n"))
plugins_download="$(mktemp -d /tmp/auto-wordpress.$$.XXXX)"

# Get all download links
pushd "${plugins_download}"
for _plugin in ${plugins[@]}; do
  if test -d "${site}/wp-content/plugins/${_plugin}/.git" ; then
    pushd "${site}/wp-content/plugins/${_plugin}"
    git reset --hard
    git pull
    popd
  else
    echo "https://api.wordpress.org/plugins/info/1.0/${_plugin}.xml" >>download.txt
  fi
done

wget --input-file="download.txt" --no-verbose --output-document=- |
  grep --only-matching "https\?://.\+\.zip" |
  grep "downloads\.wordpress\.org" >>"${plugins_download}/plugins.txt"

# Download everything
wget -i "${plugins_download}/plugins.txt" -nv

# Unzip everything
unzip "${plugins_download}/*.zip"

# Sync and remove extra files
# If we were to sync the whole plugins dir we could loose custom plugins
for _plugin in ${plugins[@]}; do
  test -d "${plugins_download}/${_plugin}/" &&
  rsync --exclude="*.zip" \
        --verbose \
        --delete \
        --recursive \
        --links \
        "${plugins_download}/${_plugin}/" \
        "${site}/wp-content/plugins/${_plugin}/"
done

# Get all installed themes
themes=($(find "${site}/wp-content/themes" -mindepth 1 -maxdepth 1 -type d -printf "%f\n"))
themes_download="$(mktemp -d /tmp/auto-wordpress.$$.XXXX)"

pushd "${themes_download}"
for _theme in ${themes[@]}; do
  if test -d "${site}/wp-content/themes/${_theme}/.git" ; then
    pushd "${site}/wp-content/themes/${_theme}"
    git reset --hard
    git pull
    popd
  else
# For some reason the API for themes is different and requires PHP
# serialized data :|
    wget --output-document=- \
         --no-verbose \
         --post-data="action=theme_information&request=O:8:\"stdClass\":1:{s:4:\"slug\";s:${#_theme}:\"${_theme}\";}" \
         "https://api.wordpress.org/themes/info/1.0/" |
      grep --only-matching "https\?://[^\"']\+" |
      grep "/download/" >>"${themes_download}/themes.txt"
  fi
done

# Download everything
wget -i "${themes_download}/themes.txt" -nv

# Unzip everything
unzip "${themes_download}/*.zip"

# Sync and remove extra files
# If we were to sync the whole themes dir we could loose custom themes
for _theme in ${themes[@]}; do
  test -d "${themes_download}/${_theme}/" &&
  rsync --exclude="*.zip" \
        --verbose \
        --delete \
        --recursive \
        --links \
        "${themes_download}/${_theme}/" \
        "${site}/wp-content/themes/${_theme}/"
done

# Remove temporary dirs
rm -rf "${plugins_download}" "${themes_download}"

# Remove write permissions, but keep them on uploads
find "${site}" -type d | grep --invert-match "uploads/" | xargs chmod 550
find "${site}" -type f | grep --invert-match "uploads/" | xargs chmod 440

# TODO
# * DRY
